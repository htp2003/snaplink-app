// hooks/useLocations.ts - Updated with Image API integration
import { useState, useEffect } from 'react';
import { locationService } from '../services/locationService';
import { imageService } from '../services/imageService';
import type { Location, LocationImage } from '../types';

// Transform API data to match component props
export interface LocationData {
  id: string;
  locationId: number;
  name: string;
  images: string[]; // Array of image URLs - will only contain first image for card
  styles: string[];
  address?: string;
  description?: string;
  amenities?: string;
  hourlyRate?: number;
  capacity?: number;
  indoor?: boolean;
  outdoor?: boolean;
  availabilityStatus?: string;
  featuredStatus?: boolean;
  verificationStatus?: string;
}

export const useLocations = () => {
  const [locations, setLocations] = useState<LocationData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [allLocationImages, setAllLocationImages] = useState<any[]>([]); 

  // üñºÔ∏è L·∫•y t·∫•t c·∫£ ·∫£nh location m·ªôt l·∫ßn v√† cache l·∫°i
  const fetchAllLocationImages = async () => {
    try {
      console.log(`üñºÔ∏è ƒêang l·∫•y T·∫§T C·∫¢ ·∫£nh location...`);
      
      // ‚úÖ ƒê√öNG: D√πng getAllImages() ƒë·ªÉ l·∫•y t·∫•t c·∫£ ·∫£nh theo type location
      const apiImages = await imageService.location.getImages();
      
      console.log(`üì¶ T√¨m th·∫•y ${apiImages.length} ·∫£nh location t·ªïng c·ªông`);
      setAllLocationImages(apiImages);
      
      return apiImages;
    } catch (error) {
      console.log(`‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ ·∫£nh location:`, error);
      return [];
    }
  };

  // üñºÔ∏è H√†m helper ƒë·ªÉ l·∫•y ·∫£nh ƒë·∫ßu ti√™n cho location c·ª• th·ªÉ t·ª´ cache
  const getLocationMainImage = (locationId: number, cachedImages: any[]): string => {
    try {
      console.log(`üîç ƒêang t√¨m ·∫£nh cho location ${locationId}...`);
      
      // L·ªçc ·∫£nh theo refId (locationId)
      const locationImages = cachedImages.filter(img => img.refId === locationId);
      
      if (locationImages.length > 0) {
        const firstImageUrl = locationImages[0].url;
        console.log(`‚úÖ T√¨m th·∫•y ·∫£nh cache cho location ${locationId}:`, firstImageUrl);
        return firstImageUrl;
      } else {
        console.log(`üîÑ Kh√¥ng c√≥ ·∫£nh cho location ${locationId}, tr·∫£ v·ªÅ empty string`);
      }
    } catch (error) {
      console.log(`‚ùå L·ªói khi l·ªçc ·∫£nh cho location ${locationId}:`, error);
    }
    
    // Tr·∫£ v·ªÅ empty string ƒë·ªÉ test xem c√≥ ·∫£nh th·∫≠t kh√¥ng
    console.log(`‚ö†Ô∏è Location ${locationId} kh√¥ng c√≥ ·∫£nh t·ª´ API`);
    return '';
  };

  const transformLocationData = (location: any, cachedImages: any[]): LocationData => {
    console.log('üîÑ ƒêang transform d·ªØ li·ªáu location:', location.locationId);
    
    // T√°ch amenities th√†nh styles
    let styles: string[] = [];
    if (location.amenities) {
      styles = location.amenities.split(',').map((s: string) => s.trim());
    } else {
      styles = location.indoor && location.outdoor ? ['Indoor', 'Outdoor'] :
              location.indoor ? ['Indoor'] :
              location.outdoor ? ['Outdoor'] : ['Studio'];
    }

    // üöÄ M·ªöI: L·∫•y ·∫£nh ch√≠nh t·ª´ cache
    const mainImageUrl = getLocationMainImage(location.locationId, cachedImages);

    const transformedData: LocationData = {
      id: location.locationId.toString(),
      locationId: location.locationId,
      name: location.name || 'Unknown Location',
      images: [mainImageUrl], // ‚úÖ Ch·ªâ ·∫£nh ƒë·∫ßu ti√™n cho card
      styles,
      address: location.address,
      description: location.description,
      amenities: location.amenities,
      hourlyRate: location.hourlyRate,
      capacity: location.capacity,
      indoor: location.indoor,
      outdoor: location.outdoor,
      availabilityStatus: location.availabilityStatus || 'available',
      featuredStatus: location.featuredStatus,
      verificationStatus: location.verificationStatus,
    };

    console.log('‚úÖ ƒê√£ transform xong d·ªØ li·ªáu location:', {
      locationId: transformedData.locationId,
      name: transformedData.name,
      mainImage: transformedData.images[0],
      styles: transformedData.styles
    });
    
    return transformedData;
  };

  const fetchAllLocations = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üè¢ ƒêang l·∫•y t·∫•t c·∫£ locations...');
      
      // ‚úÖ B∆∞·ªõc 1: L·∫•y t·∫•t c·∫£ ·∫£nh location tr∆∞·ªõc
      const cachedImages = await fetchAllLocationImages();
      
      // ‚úÖ B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu location
      const data = await locationService.getAll();
      console.log('üì¶ D·ªØ li·ªáu th√¥ t·ª´ Location API:', data);
      
      let arr: any[] = [];
      
      // X·ª≠ l√Ω c√°c c·∫•u tr√∫c response kh√°c nhau
      if (Array.isArray(data)) {
        arr = data;
      } else if (data && typeof data === 'object' && Array.isArray((data as any).$values)) {
        arr = (data as any).$values;
      } else if (data && typeof data === 'object') {
        // Single object response
        arr = [data];
      } else {
        console.warn('‚ö†Ô∏è C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng mong ƒë·ª£i:', data);
        arr = [];
      }
      
      console.log(`üìã ƒêang x·ª≠ l√Ω ${arr.length} locations...`);
      
      // L·ªçc locations h·ª£p l·ªá
      const validLocations = arr.filter(location => {
        const isValid = location && location.locationId !== undefined;
        if (!isValid) {
          console.warn('‚ùå D·ªØ li·ªáu location kh√¥ng h·ª£p l·ªá:', location);
        }
        return isValid;
      });
      
      // üöÄ Transform v·ªõi ·∫£nh ƒë√£ cache (ƒë·ªìng b·ªô b√¢y gi·ªù)
      const transformedData: LocationData[] = [];
      for (const location of validLocations) {
        try {
          const transformed = transformLocationData(location, cachedImages);
          transformedData.push(transformed);
        } catch (error) {
          console.error(`‚ùå L·ªói transform location ${location.locationId}:`, error);
          // Th√™m d·ªØ li·ªáu location fallback
          transformedData.push({
            id: location.locationId.toString(),
            locationId: location.locationId,
            name: location.name || 'Unknown Location',
            images: [''], // Empty string ƒë·ªÉ test
            styles: ['Studio'],
            address: location.address,
            hourlyRate: location.hourlyRate,
            capacity: location.capacity,
            availabilityStatus: location.availabilityStatus || 'available',
          });
        }
      }
      
      console.log(`‚úÖ Ho√†n t·∫•t transform ${transformedData.length} locations v·ªõi ·∫£nh`);
      setLocations(transformedData);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'L·ªói khi l·∫•y locations';
      console.error('‚ùå L·ªói khi l·∫•y locations:', err);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const getLocationById = async (id: number): Promise<LocationData | null> => {
    try {
      console.log('üîç ƒêang l·∫•y location theo ID:', id);
      const data = await locationService.getById(id);
      console.log('üì¶ D·ªØ li·ªáu th√¥ location theo ID:', data);
      
      // D√πng ·∫£nh ƒë√£ cache n·∫øu c√≥, n·∫øu kh√¥ng th√¨ fetch m·ªõi
      const cachedImages = allLocationImages.length > 0 
        ? allLocationImages 
        : await fetchAllLocationImages();
      
      return transformLocationData(data, cachedImages);
    } catch (err) {
      console.error('‚ùå L·ªói khi l·∫•y location theo ID:', err);
      return null;
    }
  };

  const refreshLocations = () => {
    fetchAllLocations();
  };

  useEffect(() => {
    fetchAllLocations();
  }, []);

  return {
    locations,
    loading,
    error,
    refreshLocations,
    fetchAllLocations,
    getLocationById,
  };
};