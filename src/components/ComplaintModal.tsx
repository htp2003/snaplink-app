// components/ComplaintModal.tsx

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  Modal,
  TouchableOpacity,
  TextInput,
  ScrollView,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { getResponsiveSize } from '../utils/responsive';
import complaintService, { CreateComplaintRequest } from '../services/complaintService';

interface ComplaintModalProps {
  visible: boolean;
  onClose: () => void;
  bookingId: number;
  reportedUserId: number; // Photographer's user ID
  reportedUserName?: string; // Photographer's name
  onComplaintSubmitted?: () => void;
  isBeforeBookingTime?: boolean;
  bookingStartTime?: string;
}

const ComplaintModal: React.FC<ComplaintModalProps> = ({
  visible,
  onClose,
  bookingId,
  reportedUserId,
  reportedUserName,
  onComplaintSubmitted,
  isBeforeBookingTime = false,
  bookingStartTime,
}) => {
  const [complaintTypes, setComplaintTypes] = useState<string[]>([]);
  const [selectedType, setSelectedType] = useState<string>('');
  const [customType, setCustomType] = useState<string>('');
  const [description, setDescription] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [loadingTypes, setLoadingTypes] = useState(false);

  // üÜï ADD: formatDate function
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // Use hardcoded complaint types immediately - no API call
  useEffect(() => {
    if (visible) {
      const getComplaintTypes = () => {
        if (isBeforeBookingTime) {
          // Tr∆∞·ªõc th·ªùi gian booking - y√™u c·∫ßu h·ªßy/thay ƒë·ªïi
          return [
            "Kh√¥ng th·ªÉ tham gia ƒë∆∞·ª£c n·ªØa",
            "Thay ƒë·ªïi k·∫ø ho·∫°ch ƒë·ªôt xu·∫•t",
            "Photographer kh√¥ng ph·∫£n h·ªìi",
            "Mu·ªën thay ƒë·ªïi th·ªùi gian booking",
            "Kh√¥ng h√†i l√≤ng v·ªõi th·ªèa thu·∫≠n ban ƒë·∫ßu",
            "V·∫•n ƒë·ªÅ v·ªÅ gi√° c·∫£",
            "Photographer y√™u c·∫ßu th√™m ph√≠",
            "V·∫•n ƒë·ªÅ s·ª©c kh·ªèe ƒë·ªôt xu·∫•t",
            "ƒêi·ªÅu ki·ªán th·ªùi ti·∫øt kh√¥ng ph√π h·ª£p",
            "Kh√°c"
          ];
        } else {
          // Sau/trong th·ªùi gian booking - khi·∫øu n·∫°i ch·∫•t l∆∞·ª£ng
          return [
            "Photographer kh√¥ng chuy√™n nghi·ªáp",
            "Ch·∫•t l∆∞·ª£ng ·∫£nh kh√¥ng ƒë·∫°t y√™u c·∫ßu", 
            "Kh√¥ng giao ·∫£nh ƒë√∫ng h·∫°n",
            "·∫¢nh kh√¥ng ƒë√∫ng nh∆∞ th·ªèa thu·∫≠n",
            "Link ·∫£nh b·ªã l·ªói ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c",
            "Th√°i ƒë·ªô ph·ª•c v·ª• kh√¥ng t·ªët",
            "Photographer ƒë·∫øn mu·ªôn ho·∫∑c kh√¥ng ƒë·∫øn",
            "Kh√¥ng tu√¢n th·ªß y√™u c·∫ßu ƒë·∫∑c bi·ªát",
            "Thi·∫øt b·ªã ch·ª•p ·∫£nh c√≥ v·∫•n ƒë·ªÅ",
            "Vi ph·∫°m quy ƒë·ªãnh an to√†n",
            "Kh√°c"
          ];
        }
      };
      
      setComplaintTypes(getComplaintTypes());
      setLoadingTypes(false);
    }
  }, [visible, isBeforeBookingTime]);

  // Reset form when modal opens
  useEffect(() => {
    if (visible) {
      setSelectedType('');
      setCustomType('');
      setDescription('');
    }
  }, [visible]);

  const handleSubmit = async () => {
    // Validate form
    const finalType = selectedType === 'Kh√°c' ? customType.trim() : selectedType;
    const finalDescription = description.trim();

    console.log('üîç Form data before validation:', {
      selectedType,
      customType,
      description,
      finalType,
      finalDescription,
      finalDescriptionLength: finalDescription.length
    });

    if (!finalType) {
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn lo·∫°i khi·∫øu n·∫°i');
      return;
    }

    if (selectedType === 'Kh√°c' && !customType.trim()) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p lo·∫°i khi·∫øu n·∫°i c·ª• th·ªÉ');
      return;
    }

    if (!finalDescription) {
      Alert.alert('L·ªói', 'Vui l√≤ng m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ');
      return;
    }

    if (finalDescription.length < 10) {
      Alert.alert('L·ªói', 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±');
      return;
    }

    try {
      setLoading(true);

      // üÜï ENHANCED: Build request with proper validation and logging
      const request: CreateComplaintRequest = {
        reportedUserId: Number(reportedUserId), // Ensure it's a number
        bookingId: Number(bookingId), // Ensure it's a number  
        complaintType: finalType,
        description: finalDescription, // ‚úÖ This should be the actual description text
      };

      // üÜï ENHANCED: Debug logging before sending request
      console.log('üîç ComplaintModal - Final request object:', request);
      console.log('üîç Request field types:', {
        reportedUserId: typeof request.reportedUserId,
        bookingId: typeof request.bookingId,
        complaintType: typeof request.complaintType,
        description: typeof request.description,
      });
      console.log('üîç Request field values:', {
        reportedUserId: request.reportedUserId,
        bookingId: request.bookingId,
        complaintTypeLength: request.complaintType.length,
        descriptionLength: request.description.length,
        descriptionPreview: request.description.substring(0, 50) + '...'
      });

      // üÜï VALIDATION: Double-check all fields
      if (!request.reportedUserId || request.reportedUserId === 0 || isNaN(request.reportedUserId)) {
        throw new Error(`Invalid reportedUserId: ${request.reportedUserId}`);
      }
      if (!request.bookingId || request.bookingId === 0 || isNaN(request.bookingId)) {
        throw new Error(`Invalid bookingId: ${request.bookingId}`);
      }
      if (!request.complaintType || request.complaintType.trim().length === 0) {
        throw new Error(`Invalid complaintType: "${request.complaintType}"`);
      }
      if (!request.description || request.description.trim().length < 10) {
        throw new Error(`Invalid description: length=${request.description?.length || 0}`);
      }

      console.log('‚úÖ All validations passed, sending request...');
      
      const response = await complaintService.createComplaint(request);
      
      console.log('‚úÖ Complaint created successfully:', response);

      Alert.alert(
        'Th√†nh c√¥ng',
        `${isBeforeBookingTime ? 'Y√™u c·∫ßu h·ªó tr·ª£' : 'Khi·∫øu n·∫°i'} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω xem x√©t v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.`,
        [
          {
            text: 'OK',
            onPress: () => {
              onClose();
              onComplaintSubmitted?.();
            },
          },
        ]
      );
    } catch (error: any) {
      console.error('‚ùå Error submitting complaint:', error);
      
      let errorMessage = `C√≥ l·ªói x·∫£y ra khi g·ª≠i ${isBeforeBookingTime ? 'y√™u c·∫ßu h·ªó tr·ª£' : 'khi·∫øu n·∫°i'}`;
      
      if (error?.message) {
        if (error.message.includes('401') || error.message.includes('Phi√™n ƒëƒÉng nh·∫≠p')) {
          errorMessage = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
        } else if (error.message.includes('400')) {
          errorMessage = 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.';
        } else if (error.message.includes('Invalid')) {
          errorMessage = `L·ªói d·ªØ li·ªáu: ${error.message}`;
        } else {
          errorMessage = error.message;
        }
      }
      
      Alert.alert('L·ªói', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={onClose}
    >
      <View className="flex-1 bg-white">
        {/* Header */}
        <View className="flex-row items-center justify-between p-4 border-b border-gray-200">
          <View className="flex-1">
            <Text className="text-lg font-semibold text-gray-900">
              {isBeforeBookingTime ? "Y√™u c·∫ßu h·ªó tr·ª£" : "G·ª≠i khi·∫øu n·∫°i"}
            </Text>
            {/* Dynamic subtitle based on timing */}
            {(isBeforeBookingTime && bookingStartTime) ? (
              <Text className="text-sm text-gray-600 mt-1">
                Booking: {formatDate(bookingStartTime)}
              </Text>
            ) : (
              reportedUserName && (
                <Text className="text-sm text-gray-600 mt-1">
                  V·ªÅ: {reportedUserName}
                </Text>
              )
            )}
            {/* Time indicator for before booking */}
            {isBeforeBookingTime && (
              <View className="flex-row items-center mt-1">
                <Ionicons name="time-outline" size={14} color="#059669" />
                <Text className="text-xs text-green-600 ml-1">
                  C√≤n th·ªùi gian thay ƒë·ªïi
                </Text>
              </View>
            )}
          </View>
          <TouchableOpacity
            onPress={onClose}
            className="w-8 h-8 items-center justify-center"
            disabled={loading}
          >
            <Ionicons name="close" size={24} color="#666666" />
          </TouchableOpacity>
        </View>

        <ScrollView className="flex-1 p-4" showsVerticalScrollIndicator={false}>
          {/* Pre-booking info message */}
          {isBeforeBookingTime && (
            <View className="bg-green-50 p-4 rounded-lg mb-6">
              <View className="flex-row items-start">
                <Ionicons name="information-circle" size={20} color="#059669" />
                <View className="flex-1 ml-2">
                  <Text className="text-sm font-medium text-green-800 mb-1">
                    Th·ªùi gian thay ƒë·ªïi c√≤n l·∫°i
                  </Text>
                  <Text className="text-xs text-green-700 leading-4">
                    B·∫°n c√≥ th·ªÉ y√™u c·∫ßu thay ƒë·ªïi ho·∫∑c h·ªßy booking tr∆∞·ªõc khi di·ªÖn ra.
                    Ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ t√¨m gi·∫£i ph√°p t·ªët nh·∫•t cho b·∫°n.
                  </Text>
                </View>
              </View>
            </View>
          )}

          {/* Complaint Types */}
          <View className="mb-6">
            <Text className="text-base font-medium text-gray-900 mb-3">
              {isBeforeBookingTime ? 'V·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i' : 'Lo·∫°i khi·∫øu n·∫°i'} <Text className="text-red-500">*</Text>
            </Text>

            {loadingTypes ? (
              <View className="items-center py-4">
                <ActivityIndicator size="small" color="#FF385C" />
                <Text className="text-gray-500 mt-2">ƒêang t·∫£i...</Text>
              </View>
            ) : (
              <View className="space-y-2">
                {complaintTypes.map((type, index) => (
                  <TouchableOpacity
                    key={index}
                    className={`flex-row items-center p-3 rounded-lg border ${
                      selectedType === type
                        ? (isBeforeBookingTime ? 'bg-green-50 border-green-500' : 'bg-red-50 border-red-500')
                        : 'bg-gray-50 border-gray-200'
                    }`}
                    onPress={() => setSelectedType(type)}
                    disabled={loading}
                  >
                    <View
                      className={`w-5 h-5 rounded-full border-2 items-center justify-center ${
                        selectedType === type
                          ? (isBeforeBookingTime ? 'border-green-500 bg-green-500' : 'border-red-500 bg-red-500')
                          : 'border-gray-300'
                      }`}
                    >
                      {selectedType === type && (
                        <Ionicons name="checkmark" size={12} color="white" />
                      )}
                    </View>
                    <Text
                      className={`ml-3 flex-1 ${
                        selectedType === type 
                          ? (isBeforeBookingTime ? 'text-green-700 font-medium' : 'text-red-700 font-medium')
                          : 'text-gray-700'
                      }`}
                      style={{ fontSize: getResponsiveSize(14) }}
                    >
                      {type}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            )}

            {/* Custom Type Input */}
            {selectedType === 'Kh√°c' && (
              <View className="mt-3">
                <Text className="text-sm font-medium text-gray-700 mb-2">
                  {isBeforeBookingTime ? 'Nh·∫≠p v·∫•n ƒë·ªÅ c·ª• th·ªÉ:' : 'Nh·∫≠p lo·∫°i khi·∫øu n·∫°i c·ª• th·ªÉ:'}
                </Text>
                <TextInput
                  className="border border-gray-300 rounded-lg p-3 text-gray-900"
                  placeholder={isBeforeBookingTime 
                    ? "V√≠ d·ª•: C√≥ vi·ªác gia ƒë√¨nh ƒë·ªôt xu·∫•t"
                    : "V√≠ d·ª•: Photographer ƒë·∫øn mu·ªôn 30 ph√∫t"
                  }
                  placeholderTextColor="#9CA3AF"
                  value={customType}
                  onChangeText={setCustomType}
                  maxLength={100}
                  editable={!loading}
                  style={{ fontSize: getResponsiveSize(14) }}
                />
              </View>
            )}
          </View>

          {/* Description */}
          <View className="mb-6">
            <Text className="text-base font-medium text-gray-900 mb-3">
              M√¥ t·∫£ chi ti·∫øt <Text className="text-red-500">*</Text>
            </Text>
            <Text className="text-sm text-gray-600 mb-3">
              {isBeforeBookingTime 
                ? 'Vui l√≤ng m√¥ t·∫£ r√µ r√†ng t√¨nh hu·ªëng ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t'
                : 'Vui l√≤ng m√¥ t·∫£ r√µ r√†ng v·∫•n ƒë·ªÅ ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t'
              }
            </Text>
            <TextInput
              className="border border-gray-300 rounded-lg p-3 text-gray-900"
              placeholder={isBeforeBookingTime 
                ? "M√¥ t·∫£ chi ti·∫øt t√¨nh hu·ªëng b·∫°n g·∫∑p ph·∫£i..."
                : "M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i..."
              }
              placeholderTextColor="#9CA3AF"
              value={description}
              onChangeText={setDescription}
              multiline
              numberOfLines={6}
              textAlignVertical="top"
              maxLength={1000}
              editable={!loading}
              style={{ 
                fontSize: getResponsiveSize(14),
                minHeight: getResponsiveSize(120)
              }}
            />
            <Text className="text-xs text-gray-400 mt-1 text-right">
              {description.length}/1000 k√Ω t·ª± (t·ªëi thi·ªÉu 10)
            </Text>
          </View>

          {/* Info Box - Dynamic content based on timing */}
          <View className={`p-4 rounded-lg mb-6 ${isBeforeBookingTime ? 'bg-green-50' : 'bg-blue-50'}`}>
            <View className="flex-row items-start">
              <Ionicons 
                name="information-circle" 
                size={20} 
                color={isBeforeBookingTime ? "#059669" : "#3B82F6"} 
              />
              <View className="flex-1 ml-2">
                <Text className={`text-sm font-medium mb-1 ${isBeforeBookingTime ? 'text-green-800' : 'text-blue-800'}`}>
                  L∆∞u √Ω quan tr·ªçng:
                </Text>
                <Text className={`text-xs leading-4 ${isBeforeBookingTime ? 'text-green-700' : 'text-blue-700'}`}>
                  {isBeforeBookingTime ? (
                    <>
                      ‚Ä¢ Y√™u c·∫ßu s·∫Ω ƒë∆∞·ª£c xem x√©t trong 2-4 gi·ªù l√†m vi·ªác{'\n'}
                      ‚Ä¢ Y√™u c·∫ßu ph·∫£i ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc 24h tr∆∞·ªõc th·ªùi gian ƒë·∫∑t l·ªãch{'\n'}
                    </>
                  ) : (
                    <>
                      ‚Ä¢ Khi·∫øu n·∫°i s·∫Ω ƒë∆∞·ª£c xem x√©t trong 24-48 gi·ªù l√†m vi·ªác{'\n'}
                      ‚Ä¢ Vui l√≤ng cung c·∫•p th√¥ng tin ch√≠nh x√°c ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh ch√≥ng{'\n'}
                      ‚Ä¢ Ch√∫ng t√¥i c√≥ th·ªÉ li√™n h·ªá ƒë·ªÉ x√°c minh th√¥ng tin n·∫øu c·∫ßn thi·∫øt
                    </>
                  )}
                </Text>
              </View>
            </View>
          </View>
        </ScrollView>

        {/* Footer Buttons */}
        <View className="p-4 border-t border-gray-200">
          <View className="flex-row space-x-3">
            <TouchableOpacity
              className="flex-1 bg-gray-100 py-3 rounded-lg items-center justify-center"
              onPress={onClose}
              disabled={loading}
            >
              <Text className="text-gray-700 font-medium" style={{ fontSize: getResponsiveSize(16) }}>
                H·ªßy
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              className={`flex-1 py-3 rounded-lg items-center justify-center ${
                isBeforeBookingTime ? 'bg-green-500' : 'bg-red-500'
              } ${loading ? 'opacity-60' : ''}`}
              onPress={handleSubmit}
              disabled={loading}
            >
              {loading ? (
                <ActivityIndicator size="small" color="white" />
              ) : (
                <Text className="text-white font-medium" style={{ fontSize: getResponsiveSize(16) }}>
                  {isBeforeBookingTime ? 'G·ª≠i y√™u c·∫ßu' : 'G·ª≠i khi·∫øu n·∫°i'}
                </Text>
              )}
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

export default ComplaintModal;