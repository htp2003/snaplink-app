import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Image,
  Alert,
  RefreshControl,
  Dimensions,
  Linking,
  StatusBar,
} from "react-native";
import { useNavigation, useRoute, RouteProp } from "@react-navigation/native";
import { LinearGradient } from "expo-linear-gradient";
import {
  AntDesign,
  Feather,
  MaterialIcons,
  Ionicons,
} from "@expo/vector-icons";
import type {
  RootStackNavigationProp,
  RootStackParamList,
} from "../../navigation/types";
import {
  useEventDetail,
  useApprovedPhotographers,
  useEventBooking,
} from "../../hooks/usePhotographerEvent";
import { useAuth } from "../../hooks/useAuth";

const { width: screenWidth } = Dimensions.get("window");

type EventDetailScreenRouteProp = RouteProp<
  RootStackParamList,
  "EventDetailScreen"
>;

interface EventDetailScreenProps {}

const EventDetailScreen: React.FC<EventDetailScreenProps> = () => {
  const navigation = useNavigation<RootStackNavigationProp>();
  const route = useRoute<EventDetailScreenRouteProp>();
  const { eventId } = route.params;

  const { user } = useAuth();
  const { event, loading, error, refetch } = useEventDetail(parseInt(eventId));
  const { photographers, loading: photographersLoading } =
    useApprovedPhotographers(event ? event.eventId : null);

  const { bookEvent, loading: bookingLoading } = useEventBooking();

  const [refreshing, setRefreshing] = useState(false);
  const [selectedPhotographer, setSelectedPhotographer] = useState<any>(null);
  const [isLiked, setIsLiked] = useState(false);

  // Refresh handler
  const onRefresh = async () => {
    setRefreshing(true);
    await refetch();
    setRefreshing(false);
  };

  // Format functions
  const formatPrice = (price: number | undefined): string => {
    if (price === undefined || isNaN(price)) return "Li√™n h·ªá";
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(price);
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    if (date.toDateString() === today.toDateString()) {
      return "H√îM NAY";
    } else if (date.toDateString() === tomorrow.toDateString()) {
      return "NG√ÄY MAI";
    } else {
      return date
        .toLocaleDateString("vi-VN", {
          weekday: "short",
          day: "numeric",
          month: "short",
        })
        .toUpperCase();
    }
  };

  const formatTime = (dateString: string): string => {
    const date = new Date(dateString);
    return date.toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const formatTimeRange = (): string => {
    if (!event) return "";
    return `${formatTime(event.startDate)} - ${formatTime(event.endDate)}`;
  };

  const calculateDiscount = (): number => {
    if (!event?.originalPrice || !event?.discountedPrice) return 0;
    return Math.round(
      ((event.originalPrice - event.discountedPrice) / event.originalPrice) *
        100
    );
  };

  const getTimeUntilEvent = (): string => {
    if (!event) return "";
    const now = new Date();
    const eventDate = new Date(event.startDate);
    const diffInHours = Math.round(
      (eventDate.getTime() - now.getTime()) / (1000 * 60 * 60)
    );

    if (diffInHours < 0) return "ƒê√£ b·∫Øt ƒë·∫ßu";
    if (diffInHours < 24) return `B·∫Øt ƒë·∫ßu trong ${diffInHours} gi·ªù n·ªØa!`;

    const diffInDays = Math.round(diffInHours / 24);
    return `B·∫Øt ƒë·∫ßu trong ${diffInDays} ng√†y n·ªØa`;
  };

  const getSlotsRemaining = (): number => {
    if (!event) return 0;
    return Math.max(
      0,
      (event.maxBookingsPerSlot || 0) - (event.totalBookingsCount || 0)
    );
  };

  // Handle booking
const handleJoinEvent = async () => {

  console.log("üöÄ Button clicked!"); // Debug
  console.log("User:", user);
  console.log("Selected photographer:", selectedPhotographer);
  console.log("Event:", event);
  if (!user) {
    Alert.alert(
      'Y√™u c·∫ßu ƒëƒÉng nh·∫≠p',
      'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ tham gia s·ª± ki·ªán',
      [
        { text: 'ƒêƒÉng nh·∫≠p', onPress: () => navigation.navigate('Login') },
        { text: 'H·ªßy', style: 'cancel' }
      ]
    );
    return;
  }

  if (!selectedPhotographer) {
    Alert.alert('Ch·ªçn photographer', 'Vui l√≤ng ch·ªçn photographer ƒë·ªÉ ti·∫øp t·ª•c');
    return;
  }

  if (!event) return;

  // ‚úÖ Navigate to BookingEvent screen (ƒë√£ c√≥ trong navigator)
  navigation.navigate('BookingEvent', {
    event: {
      eventId: event.eventId,
      name: event.name,
      startDate: event.startDate,
      endDate: event.endDate,
      locationName: event.location?.name,
      discountedPrice: event.discountedPrice,
      originalPrice: event.originalPrice,
      description: event.description,
    },
    preSelectedPhotographer: {
      eventPhotographerId: selectedPhotographer.eventPhotographerId,
      photographerId: selectedPhotographer.photographerId,
      photographerName: selectedPhotographer.photographer?.fullName || 'Event Photographer',
      profileImage: selectedPhotographer.photographer?.profileImage,
      specialRate: selectedPhotographer.specialRate,
    }
  });
};

  const openMap = () => {
    if (!event?.location?.address) return;

    const url = `https://maps.google.com/?q=${encodeURIComponent(
      event.location.address
    )}`;
    Linking.openURL(url);
  };

  if (loading) {
    return (
      <View className="flex-1 bg-gray-50 justify-center items-center">
        <Text className="text-gray-600">ƒêang t·∫£i...</Text>
      </View>
    );
  }

  if (error || !event) {
    return (
      <View className="flex-1 bg-gray-50 justify-center items-center px-5">
        <Text className="text-red-500 text-lg font-bold text-center mb-2">
          L·ªói t·∫£i th√¥ng tin s·ª± ki·ªán
        </Text>
        <Text className="text-gray-600 text-center mb-5">
          {error || "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán"}
        </Text>
        <TouchableOpacity
          onPress={() => navigation.goBack()}
          className="bg-pink-500 px-6 py-3 rounded-lg"
        >
          <Text className="text-white font-bold">‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
      </View>
    );
  }

  const slotsRemaining = getSlotsRemaining();
  const discount = calculateDiscount();
  const timeUntil = getTimeUntilEvent();

  return (
    <View className="flex-1 bg-gray-50">
      <StatusBar barStyle="light-content" />

      {/* Header */}
      <View className="absolute top-0 left-0 right-0 z-20 pt-12 px-5 pb-5">
        <View className="flex-row items-center justify-between">
          <TouchableOpacity
            onPress={() => navigation.goBack()}
            className="w-10 h-10 bg-black/20 rounded-full items-center justify-center backdrop-blur-md"
          >
            <AntDesign name="arrowleft" size={20} color="white" />
          </TouchableOpacity>

          <View className="flex-row gap-3">
            <TouchableOpacity
              onPress={() => setIsLiked(!isLiked)}
              className="w-10 h-10 bg-black/20 rounded-full items-center justify-center backdrop-blur-md"
            >
              <AntDesign
                name={isLiked ? "heart" : "hearto"}
                size={20}
                color={isLiked ? "#ff6b6b" : "white"}
              />
            </TouchableOpacity>
            <TouchableOpacity className="w-10 h-10 bg-black/20 rounded-full items-center justify-center backdrop-blur-md">
              <Feather name="more-horizontal" size={20} color="white" />
            </TouchableOpacity>
          </View>
        </View>
      </View>

      <ScrollView
        className="flex-1"
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
        showsVerticalScrollIndicator={false}
      >
        {/* Hero Image */}
        <View className="relative h-72">
          <LinearGradient
            colors={["#667eea", "#764ba2"]}
            style={{ width: "100%", height: "100%" }}
            className="justify-center items-center"
          >
            <Text className="text-white text-5xl">üì∏</Text>
          </LinearGradient>

          {/* Event Badges */}
          <View className="absolute top-4 left-4 flex-row gap-2">
            {timeUntil.includes("gi·ªù") && (
              <View className="bg-red-500/90 px-3 py-1.5 rounded-full">
                <Text className="text-white text-xs font-bold">üî• HOT</Text>
              </View>
            )}
            {discount > 0 && (
              <View className="bg-green-500/90 px-3 py-1.5 rounded-full">
                <Text className="text-white text-xs font-bold">
                  üí∞ -{discount}%
                </Text>
              </View>
            )}
          </View>

          {/* Slots Indicator */}
          <View className="absolute bottom-4 left-4 bg-white/90 px-3 py-2 rounded-full flex-row items-center gap-1">
            <Text className="text-red-500">üë•</Text>
            <Text className="text-gray-800 font-semibold text-xs">
              C√≤n {slotsRemaining} ch·ªó
            </Text>
          </View>
        </View>

        {/* Content */}
        <View className="px-6 pt-6">
          {/* Event Header */}
          <View className="mb-6">
            <Text className="text-amber-500 text-xs font-semibold uppercase tracking-wide mb-2">
              {formatDate(event.startDate)} ‚Ä¢ {formatTimeRange()}
            </Text>
            <Text className="text-gray-900 text-2xl font-bold mb-2 leading-tight">
              {event.name}
            </Text>
            <TouchableOpacity
              onPress={openMap}
              className="flex-row items-center gap-2 mb-4"
            >
              <Feather name="map-pin" size={16} color="#6b7280" />
              <Text className="text-gray-500 text-sm flex-1">
                {event.location?.name || "ƒê·ªãa ƒëi·ªÉm s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o"}
              </Text>
            </TouchableOpacity>
          </View>

          {/* Price Section */}
          <View className="bg-gray-50 rounded-2xl p-5 mb-6">
            <View className="flex-row items-center justify-between mb-3">
              <View className="flex-row items-center gap-3">
                <Text className="text-gray-900 text-2xl font-bold">
                  {formatPrice(event.discountedPrice || event.originalPrice)}
                </Text>
                {event.originalPrice &&
                  event.discountedPrice &&
                  event.originalPrice > event.discountedPrice && (
                    <Text className="text-gray-400 text-lg line-through">
                      {formatPrice(event.originalPrice)}
                    </Text>
                  )}
              </View>
              {discount > 0 && (
                <View className="bg-green-100 px-2 py-1 rounded-lg">
                  <Text className="text-green-600 text-xs font-semibold">
                    Ti·∫øt ki·ªám {discount}%
                  </Text>
                </View>
              )}
            </View>
            <Text className="text-gray-500 text-sm">
              Gi√° ƒë√£ bao g·ªìm t√†i li·ªáu v√† ch·ª©ng ch·ªâ
            </Text>
          </View>

          {/* Stats Grid */}
          <View className="flex-row gap-4 mb-6">
            <View className="flex-1 bg-gray-50 rounded-xl p-4 items-center">
              <View className="w-8 h-8 bg-gray-200 rounded-full mb-2 items-center justify-center">
                <Text>üë•</Text>
              </View>
              <Text className="text-gray-900 text-lg font-bold">
                {event.totalBookingsCount}/{event.maxBookingsPerSlot}
              </Text>
              <Text className="text-gray-500 text-xs">ƒê√£ ƒëƒÉng k√Ω</Text>
            </View>

            <View className="flex-1 bg-gray-50 rounded-xl p-4 items-center">
              <View className="w-8 h-8 bg-gray-200 rounded-full mb-2 items-center justify-center">
                <Text>üì∑</Text>
              </View>
              <Text className="text-gray-900 text-lg font-bold">
                {event.approvedPhotographersCount || photographers.length}
              </Text>
              <Text className="text-gray-500 text-xs">Th·ª£ ·∫£nh</Text>
            </View>

            <View className="flex-1 bg-gray-50 rounded-xl p-4 items-center">
              <View className="w-8 h-8 bg-gray-200 rounded-full mb-2 items-center justify-center">
                <Text>‚≠ê</Text>
              </View>
              <Text className="text-gray-900 text-lg font-bold">4.9</Text>
              <Text className="text-gray-500 text-xs">ƒê√°nh gi√°</Text>
            </View>
          </View>

          {/* Urgency Bar */}
          {timeUntil.includes("gi·ªù") && (
            <View className="bg-amber-100 border border-amber-200 rounded-xl p-3 mb-6 flex-row items-center gap-2">
              <Text>‚ö°</Text>
              <Text className="text-amber-800 text-sm font-semibold">
                {timeUntil}
              </Text>
            </View>
          )}

          {/* About Section */}
          <View className="mb-8">
            <Text className="text-gray-900 text-lg font-bold mb-3">
              V·ªÅ s·ª± ki·ªán n√†y
            </Text>
            <Text className="text-gray-700 leading-relaxed">
              {event.description ||
                "Tham gia workshop ch·ª•p ·∫£nh c∆∞·ªõi chuy√™n nghi·ªáp v·ªõi c√°c nhi·∫øp ·∫£nh gia h√†ng ƒë·∫ßu. H·ªçc c√°ch b·∫Øt tr·ªçn nh·ªØng kho·∫£nh kh·∫Øc ƒë·∫πp nh·∫•t trong ng√†y tr·ªçng ƒë·∫°i. Bao g·ªìm l√Ω thuy·∫øt, th·ª±c h√†nh v√† tips t·ª´ c√°c chuy√™n gia."}
            </Text>
          </View>

          {/* Location Section */}
          {event.location && (
            <View className="mb-8">
              <Text className="text-gray-900 text-lg font-bold mb-3">
                ƒê·ªãa ƒëi·ªÉm
              </Text>
              <TouchableOpacity
                onPress={openMap}
                className="bg-gray-50 rounded-xl p-4 flex-row items-center gap-3"
              >
                <View className="w-15 h-15 bg-gray-200 rounded-lg" />
                <View className="flex-1">
                  <Text className="text-gray-900 font-semibold mb-1">
                    {event.location.name}
                  </Text>
                  <Text className="text-gray-500 text-sm">
                    {event.location.address}
                  </Text>
                </View>
                <Text className="text-blue-500 text-sm font-semibold">
                  Xem b·∫£n ƒë·ªì
                </Text>
              </TouchableOpacity>
            </View>
          )}

          {/* Timeline */}
          <View className="mb-8">
            <Text className="text-gray-900 text-lg font-bold mb-3">
              L·ªãch tr√¨nh
            </Text>
            <View className="relative pl-6">
              <View className="absolute left-2 top-0 bottom-0 w-0.5 bg-gray-200" />

              <View className="relative mb-5">
                <View className="absolute -left-8 top-1 w-4 h-4 bg-green-500 rounded-full border-3 border-white shadow-sm" />
                <Text className="text-green-500 text-xs font-semibold mb-1">
                  {formatTime(event.startDate)} -{" "}
                  {new Date(
                    new Date(event.startDate).getTime() + 15 * 60000
                  ).toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </Text>
                <Text className="text-gray-700 text-sm">
                  Check-in v√† gi·ªõi thi·ªáu
                </Text>
              </View>

              <View className="relative mb-5">
                <View className="absolute -left-8 top-1 w-4 h-4 bg-green-500 rounded-full border-3 border-white shadow-sm" />
                <Text className="text-green-500 text-xs font-semibold mb-1">
                  {new Date(
                    new Date(event.startDate).getTime() + 15 * 60000
                  ).toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}{" "}
                  -{" "}
                  {new Date(
                    new Date(event.endDate).getTime() - 15 * 60000
                  ).toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </Text>
                <Text className="text-gray-700 text-sm">
                  N·ªôi dung ch√≠nh c·ªßa workshop
                </Text>
              </View>

              <View className="relative">
                <View className="absolute -left-8 top-1 w-4 h-4 bg-green-500 rounded-full border-3 border-white shadow-sm" />
                <Text className="text-green-500 text-xs font-semibold mb-1">
                  {new Date(
                    new Date(event.endDate).getTime() - 15 * 60000
                  ).toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}{" "}
                  - {formatTime(event.endDate)}
                </Text>
                <Text className="text-gray-700 text-sm">Th·ª±c h√†nh v√† Q&A</Text>
              </View>
            </View>
          </View>

          {/* Photographers */}
          {photographers.length > 0 && (
            <View className="mb-8">
              <View className="flex-row items-center justify-between mb-4">
                <Text className="text-gray-900 text-lg font-bold">
                  Th·ª£ ·∫£nh tham gia ({photographers.length})
                </Text>
                <TouchableOpacity>
                  <Text className="text-blue-500 text-sm font-semibold">
                    Xem t·∫•t c·∫£
                  </Text>
                </TouchableOpacity>
              </View>

              <View className="flex-row flex-wrap gap-3">
                {photographers.slice(0, 4).map((photographer) => (
                  <TouchableOpacity
                    key={photographer.eventPhotographerId}
                    onPress={() => setSelectedPhotographer(photographer)}
                    className={`bg-white border rounded-xl p-3 items-center flex-1 min-w-[45%] ${
                      selectedPhotographer?.eventPhotographerId ===
                      photographer.eventPhotographerId
                        ? "border-pink-500 bg-pink-50"
                        : "border-gray-200"
                    }`}
                  >
                    <View className="w-12 h-12 bg-gray-200 rounded-full mb-2" />
                    <Text className="text-gray-900 font-semibold text-sm text-center mb-1">
                      {photographer.photographer?.fullName}
                    </Text>
                    <View className="flex-row items-center gap-1">
                      <Text className="text-amber-500 text-xs">‚≠ê</Text>
                      <Text className="text-gray-600 text-xs">
                        {photographer.photographer?.rating}
                      </Text>
                    </View>
                  </TouchableOpacity>
                ))}
              </View>

              {!selectedPhotographer && (
                <Text className="text-amber-600 text-sm mt-2">
                  üí° Ch·ªçn m·ªôt photographer ƒë·ªÉ ti·∫øp t·ª•c ƒëƒÉng k√Ω
                </Text>
              )}
            </View>
          )}

          {/* Reviews Preview */}
          <View className="mb-32">
            <Text className="text-gray-900 text-lg font-bold mb-3">
              ƒê√°nh gi√° (156)
            </Text>
            <View className="bg-gray-50 rounded-xl p-4">
              <View className="mb-4 pb-4 border-b border-gray-200">
                <View className="flex-row items-center justify-between mb-2">
                  <Text className="text-gray-900 font-semibold text-sm">
                    Nguy·ªÖn Th·ªã Lan
                  </Text>
                  <View className="flex-row">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <Text key={star} className="text-amber-500 text-xs">
                        ‚≠ê
                      </Text>
                    ))}
                  </View>
                </View>
                <Text className="text-gray-700 text-sm leading-relaxed">
                  Workshop r·∫•t b·ªï √≠ch, h·ªçc ƒë∆∞·ª£c nhi·ªÅu tip hay t·ª´ c√°c th·ª£ ·∫£nh
                  chuy√™n nghi·ªáp!
                </Text>
              </View>

              <View>
                <View className="flex-row items-center justify-between mb-2">
                  <Text className="text-gray-900 font-semibold text-sm">
                    Tr·∫ßn VƒÉn Nam
                  </Text>
                  <View className="flex-row">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <Text key={star} className="text-amber-500 text-xs">
                        ‚≠ê
                      </Text>
                    ))}
                  </View>
                </View>
                <Text className="text-gray-700 text-sm leading-relaxed">
                  Ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi, ƒë√°ng ƒë·ªìng ti·ªÅn b√°t g·∫°o. S·∫Ω tham gia th√™m
                  c√°c workshop kh√°c.
                </Text>
              </View>
            </View>
          </View>
        </View>
      </ScrollView>

      {/* CTA Section */}
      <View className="absolute bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-6 py-5">
        <View className="flex-row items-center justify-between mb-4">
          <Text className="text-gray-900 text-xl font-bold">
            {formatPrice(event.discountedPrice || event.originalPrice)}
          </Text>
          <Text className="text-red-500 text-sm font-semibold">
            Ch·ªâ c√≤n {slotsRemaining} ch·ªó!
          </Text>
        </View>

        <TouchableOpacity
          onPress={handleJoinEvent}
          disabled={
            bookingLoading || slotsRemaining === 0 || !selectedPhotographer
          }
          style={{
            backgroundColor:
              bookingLoading || slotsRemaining === 0 || !selectedPhotographer
                ? "#d1d5db"
                : "#f59e0b",
            borderRadius: 12,
            paddingVertical: 16,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            gap: 8,
          }}
        >
          <Text
            style={{
              color: "white",
              fontSize: 16,
              fontWeight: "bold",
            }}
          >
            {bookingLoading
              ? "ƒêang ƒëƒÉng k√Ω..."
              : slotsRemaining === 0
              ? "H·∫øt ch·ªó"
              : "Tham gia ngay"}
          </Text>
          {!bookingLoading && slotsRemaining > 0 && (
            <Text style={{ color: "white", fontSize: 16 }}>üöÄ</Text>
          )}
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default EventDetailScreen;
